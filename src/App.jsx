import "./styles.css";
import { useState, useEffect } from "react";
import Thermometer from "./components/Thermometer";
import Header from "./components/Header";

export default function App() {
  const [timeCount, setTimeCount] = useState(0);

  const timeToDisplay = (timeCount / 100).toFixed(2);

  /*------ Eksik state'leri aÅŸaÄŸÄ±ya ekleyin----------------------------*/
  const [cursorInButton, setCursorInButton] = useState(false);
  const [buttonHeldDown, setButtonHeldDown] = useState(false);
  /*------YukarÄ±daya eksik state'leri ekleyin----------------------------*/

  const buttonClass = !timeCount ? "outsideButton" : undefined;

  /* Challenge

	Bu sanal eÄŸlence parkÄ± oyunu, korkunÃ§ bir bilgisayar korsanÄ± iki state'ini ve dÃ¶rt event handler'Ä±nÄ± sildiÄŸi iÃ§in bozuldu. Sizin gÃ¶reviniz aÅŸaÄŸÄ±dakileri yaparak oyunu dÃ¼zeltmek: 
	
		1. KullanÄ±cÄ±nÄ±n imleci "BasÄ±lÄ± Tut" butonunun iÃ§ine girerse ve mouse butonuna basarsa, eksik olan iki state'in deÄŸerleri buna gÃ¶re deÄŸiÅŸmelidir. Bu durum deÄŸiÅŸiklikleri gerÃ§ekleÅŸirse, aÅŸaÄŸÄ±daki try bloÄŸunun useEffect'indeki mevcut kod, zamanlayÄ±cÄ± ve termometrenin yÃ¼kselmeye baÅŸlamasÄ±nÄ± saÄŸlamalÄ±dÄ±r.
		   
		2. KullanÄ±cÄ±nÄ±n imleci butondan Ã§Ä±karsa veya mouse butonunu bÄ±rakÄ±rsa, iki eksik state'in deÄŸerleri buna gÃ¶re deÄŸiÅŸmelidir.
		   
		3. TÃ¼m bunlar, eksik olay iÅŸleyicileri tarafÄ±ndan tetiklenen eksik state deÄŸerlerindeki deÄŸiÅŸiklikler yoluyla gerÃ§ekleÅŸtirilmelidir. Bu eksik state'ler ve olay iÅŸleyicilerinin yanÄ±nda herhangi bir kodu SÄ°LMEMELÄ°, eklememeli veya deÄŸiÅŸtirmemelisiniz. Bunu doÄŸru ÅŸekilde yaparsanÄ±z aÅŸaÄŸÄ±daki try bloÄŸu ve useEffect zaten yazÄ±lmÄ±ÅŸ olduklarÄ± iÃ§in mÃ¼kemmel ÅŸekilde Ã§alÄ±ÅŸacaktÄ±r. 
		   
		Bonus Challenge: DÃ¶rt olayÄ±n tamamÄ±nÄ± sadece iki - hatta sadece bir - fonksiyonla halledip halledemeyeceÄŸinizi deneyin
*/

  try {
    useEffect(() => {
      let interval;
      if (cursorInButton && buttonHeldDown) {
        interval = setInterval(() => {
          setTimeCount((timeCount) => timeCount + 1);
        }, 10);
      }
      return () => {
        setTimeCount(0);
        if (buttonHeldDown && !cursorInButton) {
          setButtonHeldDown(false);
        }
        clearInterval(interval);
      };
    }, [cursorInButton, buttonHeldDown]);
  } catch {
    console.log(
      `AHAHAHA, uygulamanÄ±z hacklendi. Ä°ki state'inizi ve dÃ¶rt event handler'Ä±nÄ±zÄ± sildim. OnlarÄ± yakalayabilir misin, bulmaya Ã§alÄ±ÅŸ ğŸ˜œ`
    );
  }

  /*------AÅŸaÄŸÄ±ya olay iÅŸleyicilerini ekleyin----------------------------*/

  const handleMouseEnter = () => setCursorInButton(true);
  const handleMouseLeave = () => {
    setCursorInButton(false);
    setButtonHeldDown(false);
  };
  const handleMouseDown = () => setButtonHeldDown(true);
  const handleMouseUp = () => setButtonHeldDown(false);

  return (
    <div className="wrapper">
      <Header time={+timeToDisplay} />
      <Thermometer time={+timeToDisplay} />
      <button
        className={buttonClass}
        onMouseEnter={handleMouseEnter}
        onMouseLeave={handleMouseLeave}
        onMouseDown={handleMouseDown}
        onMouseUp={handleMouseUp}
      >
        BasÄ±lÄ± Tut
      </button>
      <p className="time">{timeToDisplay} saniye </p>
    </div>
  );
}
